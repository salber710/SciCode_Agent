import numpy as np
import numpy.linalg as la



# Background: Graphene is a two-dimensional material consisting of carbon atoms arranged in a hexagonal lattice. 
# The lattice can be described using two basis vectors. In the case of graphene, the armchair direction is along 
# the y-axis, and the zigzag direction is along the x-axis. The lattice constant 'a' is the distance between 
# adjacent carbon atoms. The geometry of monolayer graphene can be generated by placing atoms at specific 
# coordinates based on these lattice vectors. The sliding distance 's' in the y-direction allows for the 
# simulation of a shifted lattice, which is useful in studying bilayer graphene and other phenomena. The 
# parameter 'n' determines the size of the supercell, which is the number of lattice sites to generate in 
# both positive and negative directions along the x and y axes.


def generate_monolayer_graphene(s, a, z, n):
    '''Generate the geometry of monolayer graphene.
    Args:
        s (float): Horizontal in-plane sliding distance.
        a (float): Lattice constant.
        z (float): z-coordinate
        n (int): supercell size
    Returns:
        atoms (np.array): Array containing the x, y, and z coordinates of the atoms.
    '''
    # Define the basis vectors for graphene
    a1 = np.array([np.sqrt(3) * a, 0])  # Zigzag direction
    a2 = np.array([np.sqrt(3) * a / 2, 3 * a / 2])  # Armchair direction

    # Initialize a list to store the atom positions
    atoms = []

    # Loop over the range to generate the supercell
    for i in range(-n, n + 1):
        for j in range(-n, n + 1):
            # Calculate the position of the first atom in the unit cell
            pos1 = i * a1 + j * a2
            # Calculate the position of the second atom in the unit cell
            pos2 = pos1 + np.array([0, a])
            
            # Add the z-coordinate and sliding distance to the y-coordinate
            atoms.append([pos1[0], pos1[1] + s, z])
            atoms.append([pos2[0], pos2[1] + s, z])

    # Convert the list to a numpy array
    atoms = np.array(atoms)

    return atoms


from scicode.parse.parse import process_hdf5_to_tuple

targets = process_hdf5_to_tuple('66.1', 3)
target = targets[0]

s=0
a=2.46
z=0
n=1
assert np.allclose(generate_monolayer_graphene(s, a, z, n), target)
target = targets[1]

s=0
a=2.46
z=1.7
n=1
assert np.allclose(generate_monolayer_graphene(s, a, z, n), target)
target = targets[2]

s=(-2/3)*3**0.5*2.46
a=2.46
z=0
n=1
assert np.allclose(generate_monolayer_graphene(s, a, z, n), target)
